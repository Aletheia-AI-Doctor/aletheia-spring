services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ai_doctor_container
    depends_on:
      - db
      - python_models
    env_file:
      - .env
    networks:
      - app-network
    environment:
      - SPRING_PROFILES_ACTIVE=production
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./uploads:/uploads
      - ~/.m2:/root/.m2

  reverse-proxy:
    image: nginx:alpine
    container_name: reverse-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot
    networks:
      - app-network
    depends_on:
      - frontend
      - app

  frontend:
    build:
      context: ./src/main/frontend
      dockerfile: Dockerfile
      target: production
    container_name: react_frontend
    environment:
      - NODE_ENV=production
    depends_on:
      - app
    networks:
      - app-network
    volumes:
      - ./src/main/frontend/nginx.conf:/etc/nginx/conf.d/default.conf:ro

  python_models:
    build:
      context: ./src/main/models
      dockerfile: Dockerfile
      target: production
    container_name: python_models
    networks:
      - app-network
    environment:
      - FLASK_ENV=production
    depends_on:
      - db
    volumes:
      - ./src/main/models:/app
      - ./src/main/models/weights:/app/weights
      - ./src/main/models/.venv:/app/.venv
      - ./uploads:/app/uploads


  db:
    image: mysql:8
    container_name: mysql_db
    environment:
      DATABASE_ROOT_PASSWORD: root
      MYSQL_ROOT_PASSWORD: ${DATABASE_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DATABASE_NAME}
      MYSQL_USER: ${DATABASE_USER}
      MYSQL_PASSWORD: ${DATABASE_PASSWORD}
    env_file:
      - .env
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - app-network

volumes:
  mysql_data:
  weights:


networks:
  app-network:
    driver: bridge